service: slic-starter-frontend

plugins:
  - serverless-s3-sync
provider:
  name: aws
  runtime: ${self:custom.runtime}
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${self:custom.region}

custom: ${file(./custom.yml)}

resources:
  Resources:
    siteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    siteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: siteBucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: 'Allow'
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref siteBucket
                    - '/*'
              Principal: '*'

    siteDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt siteBucket.DomainName
              Id: ${self:custom.bucketName}-origin
              S3OriginConfig:
                OriginAccessIdentity: ''
          Enabled: true
          DefaultRootObject: index.html
          HttpVersion: http2
          Aliases:
            - ${self:custom.siteDomainName}
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: ${self:custom.bucketName}-origin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.siteConfig.siteCert}
            SslSupportMethod: sni-only
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /

    webRecordSets:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${self:custom.siteConfig.publicHostedZone}
        RecordSets:
          - Name: ${self:custom.siteDomainName}
            Type: A
            AliasTarget:
              DNSName: { Fn::GetAtt: [siteDistribution, DomainName] }
              HostedZoneId: ${self:custom.cloudFrontHostedZoneId}
