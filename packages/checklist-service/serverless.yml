service: checklist-service
frameworkVersion: '3'

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
  - serverless-slic-watch-plugin
  - serverless-bundle
  - serverless-api-gateway-throttling

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'local'}
  region: ${opt:region}
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - '*'
  environment:
    SLIC_STAGE: ${self:provider.stage}
    SERVICE_NAME: ${file(./package.json):name}
    SERVICE_VERSION: ${file(./package.json):version}
    CHECKLIST_TABLE_NAME: ${self:custom.checklistTableName}
  logs:
    restApi: true
  logRetentionInDays: 7
  lambdaHashingVersion: 20201221

custom:
  app: ${file(../../app.yml)}
  bundle:
    esbuild: true
    linting: false
  checklistTableName: ${self:provider.stage}Checklists
  nsDomain: ${self:custom.app.domainConfig.nsDomain}
  checklistApiUrl:
    Fn::Join:
      - ''
      - - 'https://'
        - Ref: 'ApiGatewayRestApi'
        - '.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}'
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
    websocketPort: 4001
    stage: local
    region: ${self:provider.region}
  dynamodb:
    stages:
      - local
    start:
      migrate: true
  prune:
    automatic: true
    number: 3
  slicWatch: ${self:custom.app.slicWatch}
  apiGatewayThrottling:
    maxRequestsPerSecond: 50
    maxConcurrentRequests: 25

functions: ${file(./sls-functions.yml)}

resources:
  Parameters:
    NsDomainParameter:
      Type: String
      Default: ${self:custom.app.domainConfig.nsDomain}

    UserPoolArnParameter:
      Type: AWS::SSM::Parameter::Value<String>
      Default: /${self:provider.stage}/user-service/user-pool-arn

  Conditions:
    HasDomain: !Not [!Equals [!Ref NsDomainParameter, '']]

  Resources:
    cognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        IdentitySource: method.request.header.Authorization
        Name: slic-user-pool-authorizer-checklist-service
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !Ref UserPoolArnParameter

    tableStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: table-stream-${self:provider.stage} 
        ShardCount: 1
        StreamEncryption: 
          EncryptionType: KMS
          KeyId: alias/aws/kinesis
        StreamModeDetails:
          StreamMode: PROVISIONED

    tableStreamBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: table-stream-store-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - BucketKeyEnabled: true
              ServerSideEncryptionByDefault:
                SSEAlgorithm: aws:kms
        NotificationConfiguration:
          EventBridgeConfiguration:
            EventBridgeEnabled: true

    tableStreamFirehose:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties: 
        DeliveryStreamName: firehose-${self:provider.stage}
        DeliveryStreamType: KinesisStreamAsSource
        KinesisStreamSourceConfiguration: 
          KinesisStreamARN: !GetAtt tableStream.Arn
          RoleARN: !GetAtt firehoseDataStreamRole.Arn
        ExtendedS3DestinationConfiguration:
          BucketARN: !GetAtt tableStreamBucket.Arn
          RoleARN: !GetAtt firehoseS3DestinationRole.Arn
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 1
          ProcessingConfiguration: 
            Enabled: true
            Processors: 
              - Type: "Lambda"
                Parameters: 
                  - ParameterName: "LambdaArn"
                    ParameterValue: !GetAtt FirehoseProcessFunctionLambdaFunction.Arn

    firehoseS3DestinationRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: kinesis-firehose-policy-${self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:ListBucket
                  Resource: !Sub 'arn:aws:s3:::${tableStreamBucket}/*'
          - PolicyName: InvokeDestinationLambdaFunction
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                    - lambda:GetFunctionConfiguration
                  Resource: !GetAtt FirehoseProcessFunctionLambdaFunction.Arn
          - PolicyName: ReadInputKinesis
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - kinesis:DescribeStream
                    - kinesis:GetShardIterator
                    - kinesis:GetRecords
                  Resource: !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/table-stream-dev"

    firehoseDataStreamRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: firehose-policy-${self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - kinesis:DescribeStream
                    - kinesis:GetShardIterator
                    - kinesis:GetRecords
                  Resource: !GetAtt tableStream.Arn

    slicTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.checklistTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: listId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: listId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        KinesisStreamSpecification: 
          StreamArn: !GetAtt tableStream.Arn

    checklistServiceNameParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.stage}/checklist-service/url
        Type: String
        Value:
          Fn::Join:
            - ''
            - ['https://', {'Ref': 'ApiGatewayRestApi'}, '.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}']

    # Workaround for "Invalid stage identifier specified"
    # See https://github.com/serverless/serverless/issues/4029
    resApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      Condition: HasDomain
      DependsOn: ApiGatewayMethodPost
      Properties:
        StageName: ${self:provider.stage}
        RestApiId:
          Ref: ApiGatewayRestApi

    apiCustomDomainPathMappings:
      Type: AWS::ApiGateway::BasePathMapping
      Condition: HasDomain
      Properties:
        BasePath: 'checklist'
        RestApiId:
          Ref: ApiGatewayRestApi
        DomainName: api.${self:custom.app.domainConfig.domainPrefixes.${self:provider.stage}}${self:custom.nsDomain}
        Stage: ${self:provider.stage}
      DependsOn: resApiGatewayDeployment
