service: frontend
variablesResolutionMode: 20210326
projectDir: ..

plugins:
  - serverless-s3-sync

package:
  exclude:
    - 'node_modules/.cache/**'
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'local'}
  region: ${opt:region}

custom: 
  app: ${file(../app.yml)}
  siteConfig: ${file(./site-config.js)}
  domainConfig: ${self:custom.app.domainConfig}
  # The HostedZoneId for CloudFront distributions is always this value.
  # See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
  # AND http://docs.aws.amazon.com/general/latest/gr/rande.html
  cloudFrontHostedZoneId: Z2FDTNDATAQYW2
  s3Sync: 
    - bucketName: ${self:custom.siteConfig.bucketName}
      localDir: build

resources:
  Parameters:
    NsDomainParameter:
      Type: String
      Default: ${self:custom.app.domainConfig.nsDomain}

  Conditions:
    HasDomain: !Not [!Equals [!Ref NsDomainParameter, '']]

  Resources:
    siteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.siteConfig.bucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    siteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: siteBucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: 'Allow'
              Principal:
                CanonicalUser: !GetAtt originAccessIdentity.S3CanonicalUserId
              Resource: arn:aws:s3:::${self:custom.siteConfig.bucketName}/*

    frontendUrl:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.stage}/frontend/url
        Type: String
        Value:
          Fn::If:
            - HasDomain
            - "https://${self:custom.siteConfig.siteDomainName}"
            - Fn::Join:
                - ""
                - - https://
                  - Fn::GetAtt:
                    - siteDistribution
                    - DomainName

    originAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Allow the CloudFront distribution access to the site bucket

    siteDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - siteBucket
                  - DomainName
              Id: ${self:custom.siteConfig.bucketName}-origin
              S3OriginConfig:
                OriginAccessIdentity:
                  !Sub "origin-access-identity/cloudfront/${originAccessIdentity}"
          Enabled: true
          DefaultRootObject: index.html
          HttpVersion: http2
          Aliases:
            Fn::If:
              - HasDomain
              - ["${self:custom.siteConfig.siteDomainName}"]
              - Ref: AWS::NoValue
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: ${self:custom.siteConfig.bucketName}-origin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate: ${self:custom.siteConfig.distributionViewerCertficate}
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /

    webRecordSets:
      Type: AWS::Route53::RecordSetGroup
      Condition: HasDomain
      Properties:
        HostedZoneId: ${self:custom.siteConfig.siteHostedZone}
        RecordSets:
          - Name: ${self:custom.siteConfig.siteDomainName}
            Type: A
            AliasTarget:
              DNSName: { Fn::GetAtt: [siteDistribution, DomainName] }
              HostedZoneId: ${self:custom.cloudFrontHostedZoneId}
