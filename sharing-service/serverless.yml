service: sharing-service

plugins:
  - serverless-offline
  - serverless-pseudo-parameters
  - serverless-log-forwarding

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'local'}
  region: ${opt:region, '${env:TARGET_REGION}'}
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements: ${file(./sls-iam-role-statements.yml)}
  environment:
    SLIC_STAGE: ${self:provider.stage}
    EMAIL_QUEUE_NAME: ${self:custom.emailQueueName}
  resourcePolicy:
    - Effect: Allow
      Principal: '*'
      Action: 'execute-api:Invoke'
      Resource:
        - execute-api:/*/*/*

custom:
  domainPrefixes: ${file(../common-config.json):domainPrefixes}
  cloudFrontHostedZoneId: Z2FDTNDATAQYW2
  serverless-offline:
    port: 4004
    stage: local
    region: ${self:provider.region}
  emailQueueName: ${self:provider.stage}-email-queue
  prune:
    automatic: true
    number: 3
  logForwarding:
    destinationARN: !ImportValue ${self:provider.stage}-log-forwarder-function-arn

functions: ${file(./sls-functions.yml)}

resources:
  Resources: ${file(./sls-resources.yml.js)}
